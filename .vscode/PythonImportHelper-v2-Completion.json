[
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gymnasium",
        "description": "gymnasium",
        "isExtraImport": true,
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "importPath": "llama_index.core.llms",
        "description": "llama_index.core.llms",
        "isExtraImport": true,
        "detail": "llama_index.core.llms",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "KEN_GREEN",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "KEN_RED",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "Robot",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "importPath": "agent.config",
        "description": "agent.config",
        "isExtraImport": true,
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "EnvironmentSettingsMultiAgent",
        "importPath": "diambra.arena",
        "description": "diambra.arena",
        "isExtraImport": true,
        "detail": "diambra.arena",
        "documentation": {}
    },
    {
        "label": "RecordingSettings",
        "importPath": "diambra.arena",
        "description": "diambra.arena",
        "isExtraImport": true,
        "detail": "diambra.arena",
        "documentation": {}
    },
    {
        "label": "SpaceTypes",
        "importPath": "diambra.arena",
        "description": "diambra.arena",
        "isExtraImport": true,
        "detail": "diambra.arena",
        "documentation": {}
    },
    {
        "label": "make",
        "importPath": "diambra.arena",
        "description": "diambra.arena",
        "isExtraImport": true,
        "detail": "diambra.arena",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player1",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player2",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player1",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player2",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player1",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player2",
        "importPath": "eval.game",
        "description": "eval.game",
        "isExtraImport": true,
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "MODELS = {\n    \"OPENAI\": {\n        \"openai:gpt-4-0125-preview\",\n        \"openai:gpt-4\",\n        \"openai:gpt-3.5-turbo-0125\",\n        # \"openai:gpt-3.5-turbo-instruct\", #Â not a chat model\n    },\n    \"MISTRAL\": {\n        \"mistral:mistral-small-latest\",\n        \"mistral:mistral-medium-latest\",",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "MOVES",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "MOVES = {\n    \"No-Move\": 0,\n    \"Left\": 1,\n    \"Left+Up\": 2,\n    \"Up+Left\": 2,\n    \"Up\": 3,\n    \"Up+Right\": 4,\n    \"Right+Up\": 4,\n    \"Right\": 5,\n    \"Right+Down\": 6,",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "MOVES_WITH_LOWER",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "MOVES_WITH_LOWER = {\n    **MOVES,\n    **{key.lower(): value for key, value in MOVES.items()},\n}\nCOMBOS = {\n    \"Fireball (Hadouken)\": {\"right\": [7, 6, 5, 10], \"left\": [7, 8, 1, 10]},\n    # Refacto with command names\n    \"Dragon Punch (Shoryuken)\": {\n        \"right\": [\n            MOVES[\"Right\"],",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "COMBOS",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "COMBOS = {\n    \"Fireball (Hadouken)\": {\"right\": [7, 6, 5, 10], \"left\": [7, 8, 1, 10]},\n    # Refacto with command names\n    \"Dragon Punch (Shoryuken)\": {\n        \"right\": [\n            MOVES[\"Right\"],\n            MOVES[\"Down\"],\n            MOVES[\"Down+Right\"],\n            MOVES[\"High Punch\"],\n        ],",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "SPECIAL_MOVES",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "SPECIAL_MOVES = {\n    \"EX-Fireball (Hadouken)\": {\"right\": [7, 6, 5, 10, 10], \"left\": [7, 8, 1, 10, 10]},\n    \"EX-Dragon Punch (Shoryuken)\": {\n        \"right\": [\n            MOVES[\"Right\"],\n            MOVES[\"Down\"],\n            MOVES[\"Down+Right\"],\n            MOVES[\"High Punch\"],\n            MOVES[\"High Punch\"],\n        ],",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "META_INSTRUCTIONS",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "META_INSTRUCTIONS = {\n    \"Move Closer\": {\"right\": [5, 5, 5, 5], \"left\": [1, 1, 1, 1]},\n    \"Move Away\": {\"right\": [1, 1, 1, 1], \"left\": [5, 5, 5, 5]},\n    \"Fireball\": COMBOS[\"Fireball (Hadouken)\"],\n    \"Megapunch\": COMBOS[\"Dragon Punch (Shoryuken)\"],\n    \"Hurricane\": COMBOS[\"Hurricane Kick (Tatsumaki Senpukyaku)\"],\n    \"Megafireball\": SPECIAL_MOVES[\"EX-Fireball (Hadouken)\"],\n    \"Super attack 2\": SPECIAL_MOVES[\"EX-Dragon Punch (Shoryuken)\"],\n    \"Super attack 3\": SPECIAL_MOVES[\"Super Dragon Punch (Shouryuu-Reppa)\"],\n    \"Super attack 4\": SPECIAL_MOVES[\"Shippuu-Jinrai-Kyaku\"],",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "META_INSTRUCTIONS_WITH_LOWER",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "META_INSTRUCTIONS_WITH_LOWER = {\n    **META_INSTRUCTIONS,\n    **{key.lower(): value for key, value in META_INSTRUCTIONS.items()},\n    ##Â Also add the combos for Lower, Medium and High\n    \"lower\": {\"right\": [12, 0], \"left\": [12, 0]},\n    \"medium\": {\"right\": [13, 0], \"left\": [13, 0]},\n    \"med\": {\"right\": [13, 0], \"left\": [13, 0]},\n    \"high\": {\"right\": [14, 0], \"left\": [14, 0]},\n}\nINDEX_TO_MOVE = {v: k for k, v in MOVES.items()}",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "INDEX_TO_MOVE",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "INDEX_TO_MOVE = {v: k for k, v in MOVES.items()}\nX_SIZE = 384\nY_SIZE = 224\n# TODO : Adds some combos to this\nREAL_MOVE_LIST = [\n    \"No-Move\",\n    \"Left\",\n    \"Left+Up\",\n    \"Up\",\n    \"Right\",",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "X_SIZE",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "X_SIZE = 384\nY_SIZE = 224\n# TODO : Adds some combos to this\nREAL_MOVE_LIST = [\n    \"No-Move\",\n    \"Left\",\n    \"Left+Up\",\n    \"Up\",\n    \"Right\",\n    \"Right+Down\",",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "Y_SIZE",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "Y_SIZE = 224\n# TODO : Adds some combos to this\nREAL_MOVE_LIST = [\n    \"No-Move\",\n    \"Left\",\n    \"Left+Up\",\n    \"Up\",\n    \"Right\",\n    \"Right+Down\",\n    \"Down\",",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "REAL_MOVE_LIST",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "REAL_MOVE_LIST = [\n    \"No-Move\",\n    \"Left\",\n    \"Left+Up\",\n    \"Up\",\n    \"Right\",\n    \"Right+Down\",\n    \"Down\",\n    \"Down+Left\",\n    \"Low Punch\",",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "NB_FRAME_WAIT",
        "kind": 5,
        "importPath": "agent.config",
        "description": "agent.config",
        "peekOfCode": "NB_FRAME_WAIT = 1",
        "detail": "agent.config",
        "documentation": {}
    },
    {
        "label": "get_client",
        "kind": 2,
        "importPath": "agent.llm",
        "description": "agent.llm",
        "peekOfCode": "def get_client(model_str):\n    provider, model = model_str.split(\":\")\n    if provider == \"openai\":\n        from llama_index.llms.openai import OpenAI\n        return OpenAI(model=model)\n    elif provider == \"anthropic\":\n        from llama_index.llms.anthropic import Anthropic\n        return Anthropic(model=model)\n    elif provider == \"mixtral\" or provider == \"groq\":\n        from llama_index.llms.groq import Groq",
        "detail": "agent.llm",
        "documentation": {}
    },
    {
        "label": "detect_position_from_color",
        "kind": 2,
        "importPath": "agent.observer",
        "description": "agent.observer",
        "peekOfCode": "def detect_position_from_color(\n    observation: dict, color: list, epsilon=1, save_frame: bool = False\n) -> tuple:\n    \"\"\"\n    Convert the observation from pixels to player coordinates.\n    It works by finding the first pixel that matches the color.\n    Returns a tuple of (x, y) coordinates.\n    - x is between 0 and 384\n    - y is between 0 and 224\n    \"\"\"",
        "detail": "agent.observer",
        "documentation": {}
    },
    {
        "label": "KEN_RED",
        "kind": 5,
        "importPath": "agent.observer",
        "description": "agent.observer",
        "peekOfCode": "KEN_RED = [248, 0, 0]\nKEN_GREEN = [88, 176, 40]\ndef detect_position_from_color(\n    observation: dict, color: list, epsilon=1, save_frame: bool = False\n) -> tuple:\n    \"\"\"\n    Convert the observation from pixels to player coordinates.\n    It works by finding the first pixel that matches the color.\n    Returns a tuple of (x, y) coordinates.\n    - x is between 0 and 384",
        "detail": "agent.observer",
        "documentation": {}
    },
    {
        "label": "KEN_GREEN",
        "kind": 5,
        "importPath": "agent.observer",
        "description": "agent.observer",
        "peekOfCode": "KEN_GREEN = [88, 176, 40]\ndef detect_position_from_color(\n    observation: dict, color: list, epsilon=1, save_frame: bool = False\n) -> tuple:\n    \"\"\"\n    Convert the observation from pixels to player coordinates.\n    It works by finding the first pixel that matches the color.\n    Returns a tuple of (x, y) coordinates.\n    - x is between 0 and 384\n    - y is between 0 and 224",
        "detail": "agent.observer",
        "documentation": {}
    },
    {
        "label": "Robot",
        "kind": 6,
        "importPath": "agent.robot",
        "description": "agent.robot",
        "peekOfCode": "class Robot:\n    observations: List[Optional[dict]] = None  # memory\n    next_steps: List[int]  # action plan\n    actions: dict  # actions of the agents during a step of the game\n    # actions of the agents during the previous step of the game\n    previous_actions: Dict[str, List[int]]\n    reward: float  # reward of the agent\n    action_space: spaces.Space\n    character: Optional[str] = None  # character name\n    side: int  # side of the stage where playing: 0 = left, 1 = right",
        "detail": "agent.robot",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class Player:\n    nickname: str\n    model: str\n    robot: Optional[Robot] = None\n    temperature: Optional[float] = 0.0\n    def verify_provider_name(self):\n        if self.model.startswith(\"openai\"):\n            assert (\n                os.environ.get(\"OPENAI_API_KEY\") is not None\n            ), \"OpenAI API key not set\"",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player1",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class Player1(Player):\n    def __init__(\n        self,\n        nickname: str,\n        model: str,\n    ):\n        self.nickname = nickname\n        self.model = model\n        self.robot = Robot(\n            action_space=None,",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Player2",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class Player2(Player):\n    def __init__(\n        self,\n        nickname: str,\n        model: str,\n    ):\n        self.nickname = nickname\n        self.model = model\n        self.robot = Robot(\n            action_space=None,",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Episode",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class Episode:\n    player_1: Optional[Player1]\n    player_2: Player2\n    player_1_won: Optional[bool] = None\n    def __init__(self, player_1: Optional[Player1], player_2: Player2):\n        self.player_1 = player_1\n        self.player_2 = player_2\n    def save(self):\n        if self.player_1 is None:\n            # Playing with the controller",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class Game:\n    player_1: Optional[Player1] = None  # First player. None if Human\n    player_2: Player2\n    render: Optional[bool] = False\n    splash_screen: Optional[bool] = False\n    save_game: Optional[bool] = False\n    characters: Optional[List[str]] = [\"Ken\", \"Ken\"]\n    outfits: Optional[List[int]] = [1, 3]\n    frame_shape: Optional[List[int]] = [0, 0, 0]\n    seed: Optional[int] = 42",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "PlanAndAct",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class PlanAndAct(Thread):\n    def __init__(self, game: Game, episode: Episode):\n        self.running = True\n        self.game = game\n        self.episode = episode\n        Thread.__init__(self, daemon=True)\n        # atexit.register(self.stop)\nclass PlanAndActPlayer1(PlanAndAct):\n    def run(self) -> None:\n        while self.running:",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "PlanAndActPlayer1",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class PlanAndActPlayer1(PlanAndAct):\n    def run(self) -> None:\n        while self.running:\n            if \"agent_0\" not in self.game.actions:\n                # Plan\n                self.game.player_1.robot.plan()\n                # Act\n                self.game.actions[\"agent_0\"] = self.game.player_1.robot.act()\n                # Observe the environment\n                self.game.player_1.robot.observe(",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "PlanAndActPlayer2",
        "kind": 6,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "class PlanAndActPlayer2(PlanAndAct):\n    def run(self) -> None:\n        while self.running:\n            if \"agent_1\" not in self.game.actions:\n                # Plan\n                self.game.player_2.robot.plan()\n                # Act\n                self.game.actions[\"agent_1\"] = self.game.player_2.robot.act()\n                # Observe the environment\n                self.game.player_2.robot.observe(",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "generate_random_model",
        "kind": 2,
        "importPath": "eval.game",
        "description": "eval.game",
        "peekOfCode": "def generate_random_model(openai: bool = False, mistral: bool = True):\n    models_available = []\n    for model, models in MODELS.items():\n        if openai and model == \"OPENAI\":\n            models_available.extend(models)\n        if mistral and model == \"MISTRAL\":\n            models_available.extend(models)\n    random.seed()\n    # Generate a pair of random two models\n    random_model = random.choice(models_available)",
        "detail": "eval.game",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "demo",
        "description": "demo",
        "peekOfCode": "def main():\n    # Environment Settings\n    game = Game(\n        render=True,\n        save_game=True,\n        player_1=Player1(\n            nickname=\"Baby\",\n            model=\"mistral:mistral-small-latest\",\n        ),\n        player_2=Player2(",
        "detail": "demo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ollama",
        "description": "ollama",
        "peekOfCode": "def main():\n    # Environment Settings\n    game = Game(\n        render=True,\n        save_game=True,\n        player_1=Player1(\n            nickname=\"Baby\",\n            model=\"ollama:qwen:14b-chat-v1.5-fp16\",\n            # model=\"ollama:mistral\",\n        ),",
        "detail": "ollama",
        "documentation": {}
    },
    {
        "label": "display_win_screen",
        "kind": 2,
        "importPath": "result",
        "description": "result",
        "peekOfCode": "def display_win_screen():\n    current_directory = os.path.dirname(os.path.realpath(__file__))\n    image_path = os.path.join(current_directory, \"winscreen.jpg\")\n    # Create the main application window\n    root = tk.Tk()\n    root.title(\"Image Display\")\n    # Load the image\n    image = Image.open(image_path)\n    # Convert the Image object into a Tkinter-compatible photo image\n    tk_image = ImageTk.PhotoImage(image)",
        "detail": "result",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "script",
        "description": "script",
        "peekOfCode": "def main():\n    # Environment Settings\n    game = Game(\n        render=True,\n        player_1=Player1(\n            nickname=\"Daddy\",\n            model=\"groq:mistral-8x6b-32768\",\n        ),\n        player_2=Player2(\n            nickname=\"Baby\",",
        "detail": "script",
        "documentation": {}
    }
]